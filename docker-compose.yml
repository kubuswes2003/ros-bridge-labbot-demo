services:
  # ROS1 Mock Robot - symuluje labbot robota
  ros1_robot:
    build: 
      context: ./ros1_robot
      dockerfile: Dockerfile
    container_name: labbot_mock
    environment:
      - ROS_MASTER_URI=http://ros1_robot:11311
      - ROS_HOSTNAME=ros1_robot
    networks:
      - ros_network
    volumes:
      - ./ros1_robot/src:/robot_ws:rw
    command: >
      bash -c "
        source /opt/ros/noetic/setup.bash &&
        roscore &
        sleep 3 &&
        python3 /robot_ws/mock_robot.py
      "

  # ROS1 Bridge - GOTOWY obraz bez dodatkowej instalacji
  ros1_bridge:
    image: ros:foxy-ros1-bridge-focal
    container_name: ros_bridge
    depends_on:
      - ros1_robot
    environment:
      - ROS_MASTER_URI=http://ros1_robot:11311
      - ROS_HOSTNAME=ros1_bridge
      - ROS_DOMAIN_ID=0
    networks:
      - ros_network
    command: >
      bash -c "
        echo 'ðŸŒ‰ Uruchamianie prawdziwego ros1_bridge...' &&
        echo 'ðŸ“¡ Connecting to ROS1 at: $ROS_MASTER_URI' &&
        source /opt/ros/noetic/setup.bash &&
        source /opt/ros/foxy/setup.bash &&
        echo 'âœ… Sourced ROS1 Noetic + ROS2 Foxy' &&
        echo 'ðŸ”„ Starting dynamic bridge with all topics...' &&
        ros2 run ros1_bridge dynamic_bridge --bridge-all-topics
      "

  # ROS2 Controller - Twoja aplikacja sterujÄ…ca
  ros2_controller:
    build:
      context: ./ros2_controller  
      dockerfile: Dockerfile
    container_name: robot_controller
    depends_on:
      - ros1_bridge
    environment:
      - ROS_DOMAIN_ID=0
    networks:
      - ros_network
    volumes:
      - ./ros2_controller/src:/ros2_ws/src/robot_controller:rw
    stdin_open: true
    tty: true
    command: >
      bash -c "
        source /opt/ros/foxy/setup.bash &&
        source /ros2_ws/install/setup.bash &&
        python3 /ros2_ws/src/robot_controller/robot_controller/controller_node.py
      "

# SieÄ‡ Docker - pozwala kontenerom siÄ™ komunikowaÄ‡
networks:
  ros_network:
    driver: bridge